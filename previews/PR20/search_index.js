var documenterSearchIndex = {"docs":
[{"location":"#DisplayAs.jl","page":"Home","title":"DisplayAs.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [DisplayAs]","category":"page"},{"location":"#DisplayAs.DisplayAs","page":"Home","title":"DisplayAs.DisplayAs","text":"DisplayAs\n\n(Image: Stable) (Image: Dev) (Image: Run tests) (Image: Codecov) (Image: Aqua QA) (Image: GitHub last commit)\n\nDisplayAs.jl provides functions to show objects in a chosen MIME type.\n\njulia> using DisplayAs\n       using Markdown\n\njulia> md_as_html = Markdown.parse(\"hello\") |> DisplayAs.HTML;\n\njulia> showable(\"text/html\", md_as_html)\ntrue\n\njulia> showable(\"text/markdown\", md_as_html)\nfalse\n\njulia> md_as_md = Markdown.parse(\"hello\") |> DisplayAs.MD;\n\njulia> showable(\"text/html\", md_as_md)\nfalse\n\njulia> showable(\"text/markdown\", md_as_md)\ntrue\n\nIt is also possible to use nesting in order to allow the object to be displayed as multiple MIME types:\n\njulia> md_as_html_or_text = Markdown.parse(\"hello\") |> DisplayAs.HTML |> DisplayAs.Text;\n\njulia> showable(\"text/html\", md_as_html_or_text)\ntrue\n\njulia> showable(\"text/plain\", md_as_html_or_text)\ntrue\n\njulia> showable(\"text/markdown\", md_as_html_or_text)\nfalse\n\n\n\n\n\n","category":"module"},{"location":"#DisplayAs.CSV","page":"Home","title":"DisplayAs.CSV","text":"DisplayAs.CSV(x)\n\nWrap an object x in another object that prefers to be displayed as MIME type text/csv.  That is to say, display(DisplayAs.CSV(x)) is equivalent to display(\"text/csv\", x) (except some corner cases).\n\nIf x is already of type Showable the result will allow displaying in both the original and the new MIME type.\n\nSee also Showable.\n\n\n\n\n\n","category":"type"},{"location":"#DisplayAs.EPS","page":"Home","title":"DisplayAs.EPS","text":"DisplayAs.EPS(x)\n\nWrap an object x in another object that prefers to be displayed as MIME type application/eps.  That is to say, display(DisplayAs.EPS(x)) is equivalent to display(\"application/eps\", x) (except some corner cases).\n\nIf x is already of type Showable the result will allow displaying in both the original and the new MIME type.\n\nSee also Showable.\n\n\n\n\n\n","category":"type"},{"location":"#DisplayAs.HTML","page":"Home","title":"DisplayAs.HTML","text":"DisplayAs.HTML(x)\n\nWrap an object x in another object that prefers to be displayed as MIME type text/html.  That is to say, display(DisplayAs.HTML(x)) is equivalent to display(\"text/html\", x) (except some corner cases).\n\nIf x is already of type Showable the result will allow displaying in both the original and the new MIME type.\n\nSee also Showable.\n\n\n\n\n\n","category":"type"},{"location":"#DisplayAs.JPEG","page":"Home","title":"DisplayAs.JPEG","text":"DisplayAs.JPEG(x)\n\nWrap an object x in another object that prefers to be displayed as MIME type image/jpeg.  That is to say, display(DisplayAs.JPEG(x)) is equivalent to display(\"image/jpeg\", x) (except some corner cases).\n\nIf x is already of type Showable the result will allow displaying in both the original and the new MIME type.\n\nSee also Showable.\n\n\n\n\n\n","category":"type"},{"location":"#DisplayAs.JSON","page":"Home","title":"DisplayAs.JSON","text":"DisplayAs.JSON(x)\n\nWrap an object x in another object that prefers to be displayed as MIME type application/json.  That is to say, display(DisplayAs.JSON(x)) is equivalent to display(\"application/json\", x) (except some corner cases).\n\nIf x is already of type Showable the result will allow displaying in both the original and the new MIME type.\n\nSee also Showable.\n\n\n\n\n\n","category":"type"},{"location":"#DisplayAs.LaTeX","page":"Home","title":"DisplayAs.LaTeX","text":"DisplayAs.LaTeX(x)\n\nWrap an object x in another object that prefers to be displayed as MIME type text/latex.  That is to say, display(DisplayAs.LaTeX(x)) is equivalent to display(\"text/latex\", x) (except some corner cases).\n\nIf x is already of type Showable the result will allow displaying in both the original and the new MIME type.\n\nSee also Showable.\n\n\n\n\n\n","category":"type"},{"location":"#DisplayAs.MD","page":"Home","title":"DisplayAs.MD","text":"DisplayAs.MD(x)\n\nWrap an object x in another object that prefers to be displayed as MIME type text/markdown.  That is to say, display(DisplayAs.MD(x)) is equivalent to display(\"text/markdown\", x) (except some corner cases).\n\nIf x is already of type Showable the result will allow displaying in both the original and the new MIME type.\n\nSee also Showable.\n\n\n\n\n\n","category":"type"},{"location":"#DisplayAs.PDF","page":"Home","title":"DisplayAs.PDF","text":"DisplayAs.PDF(x)\n\nWrap an object x in another object that prefers to be displayed as MIME type application/pdf.  That is to say, display(DisplayAs.PDF(x)) is equivalent to display(\"application/pdf\", x) (except some corner cases).\n\nIf x is already of type Showable the result will allow displaying in both the original and the new MIME type.\n\nSee also Showable.\n\n\n\n\n\n","category":"type"},{"location":"#DisplayAs.PNG","page":"Home","title":"DisplayAs.PNG","text":"DisplayAs.PNG(x)\n\nWrap an object x in another object that prefers to be displayed as MIME type image/png.  That is to say, display(DisplayAs.PNG(x)) is equivalent to display(\"image/png\", x) (except some corner cases).\n\nIf x is already of type Showable the result will allow displaying in both the original and the new MIME type.\n\nSee also Showable.\n\n\n\n\n\n","category":"type"},{"location":"#DisplayAs.PS","page":"Home","title":"DisplayAs.PS","text":"DisplayAs.PS(x)\n\nWrap an object x in another object that prefers to be displayed as MIME type application/postscript.  That is to say, display(DisplayAs.PS(x)) is equivalent to display(\"application/postscript\", x) (except some corner cases).\n\nIf x is already of type Showable the result will allow displaying in both the original and the new MIME type.\n\nSee also Showable.\n\n\n\n\n\n","category":"type"},{"location":"#DisplayAs.SVG","page":"Home","title":"DisplayAs.SVG","text":"DisplayAs.SVG(x)\n\nWrap an object x in another object that prefers to be displayed as MIME type image/svg+xml.  That is to say, display(DisplayAs.SVG(x)) is equivalent to display(\"image/svg+xml\", x) (except some corner cases).\n\nIf x is already of type Showable the result will allow displaying in both the original and the new MIME type.\n\nSee also Showable.\n\n\n\n\n\n","category":"type"},{"location":"#DisplayAs.Showable","page":"Home","title":"DisplayAs.Showable","text":"Showable{mime <: MIME}\n\nExamples\n\njulia> using DisplayAs\n\njulia> DisplayAs.Showable{MIME\"text/html\"} === DisplayAs.HTML\ntrue\n\njulia> using Markdown\n\njulia> md = Markdown.parse(\"hello\");\n\njulia> showable(\"text/html\", md)\ntrue\n\njulia> showable(\"text/markdown\", md)\ntrue\n\njulia> showable(\"text/html\", DisplayAs.HTML(md))\ntrue\n\njulia> showable(\"text/markdown\", DisplayAs.HTML(md))\nfalse\n\njulia> showable(\"text/html\", DisplayAs.MD(md))\nfalse\n\njulia> showable(\"text/markdown\", DisplayAs.MD(md))\ntrue\n\n\n\n\n\n","category":"type"},{"location":"#DisplayAs.TSV","page":"Home","title":"DisplayAs.TSV","text":"DisplayAs.TSV(x)\n\nWrap an object x in another object that prefers to be displayed as MIME type text/tab-separated-values.  That is to say, display(DisplayAs.TSV(x)) is equivalent to display(\"text/tab-separated-values\", x) (except some corner cases).\n\nIf x is already of type Showable the result will allow displaying in both the original and the new MIME type.\n\nSee also Showable.\n\n\n\n\n\n","category":"type"},{"location":"#DisplayAs.Text","page":"Home","title":"DisplayAs.Text","text":"DisplayAs.Text(x)\n\nWrap an object x in another object that prefers to be displayed as MIME type text/plain.  That is to say, display(DisplayAs.Text(x)) is equivalent to display(\"text/plain\", x) (except some corner cases).\n\nIf x is already of type Showable the result will allow displaying in both the original and the new MIME type.\n\nSee also Showable.\n\n\n\n\n\n","category":"type"},{"location":"#DisplayAs.Unlimited-Tuple{Any}","page":"Home","title":"DisplayAs.Unlimited","text":"Unlimited\n\nUnlimit display size. Useful for, e.g., printing all contents of dataframes in a Jupyter notebook.\n\nExamples\n\njulia> using DisplayAs, VegaDatasets\n\njulia> data = dataset(\"cars\");\n\njulia> data |> DisplayAs.Unlimited\n\n\n\n\n\n","category":"method"},{"location":"#DisplayAs.setcontext-Tuple{Any, Vararg{Pair}}","page":"Home","title":"DisplayAs.setcontext","text":"DisplayAs.setcontext(obj, kvs::Pair...)\n\nBundle arguments for IOContext with the object x.\n\nExamples\n\njulia> import DisplayAs\n\njulia> data = rand(2, 2)\n2×2 Array{Float64,2}:\n 0.786992  0.576265\n 0.321868  0.791263\n\njulia> DisplayAs.setcontext(data, :compact => false)\n2×2 Array{Float64,2}:\n 0.7869920812675713   0.5762653628115182\n 0.32186846202784314  0.791263230914472\n\nSee also DisplayAs.withcontext.\n\n\n\n\n\n","category":"method"},{"location":"#DisplayAs.withcontext-Tuple{Vararg{Pair}}","page":"Home","title":"DisplayAs.withcontext","text":"DisplayAs.withcontext(kvs::Pair...)\n\nConvenience method equivalent to obj -> DisplayAs.setcontext(obj, kvs...) useful for \"piping\".\n\nExamples\n\njulia> import DisplayAs\n\njulia> rand(2, 2) |> DisplayAs.withcontext(:compact => false)\n2×2 Array{Float64,2}:\n 0.7869920812675713   0.5762653628115182\n 0.32186846202784314  0.791263230914472\n\nSee also DisplayAs.setcontext.\n\n\n\n\n\n","category":"method"},{"location":"#DisplayAs.@mime_str-Tuple{Any}","page":"Home","title":"DisplayAs.@mime_str","text":"mime\"...\" :: Type{<:Showable}\n\nExamples\n\njulia> using DisplayAs\n\njulia> DisplayAs.mime\"text/plain\" === DisplayAs.Text\ntrue\n\n\n\n\n\n","category":"macro"}]
}
